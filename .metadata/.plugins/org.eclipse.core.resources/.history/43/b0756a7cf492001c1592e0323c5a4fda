package com.mycompany;

import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.mycompany.Employee.APIResponse;
import com.mycompany.Employee.EmployeePrimarySkillRequest;
import com.mycompany.employeeGrpc.employeeBlockingStub;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

public class EmpGRPCClient {

	private static final Logger logger = LogManager.getLogger(EmpGRPCClient.class);

	public static void main(String[] args) throws Exception{

		//defaults
		int empID = 0; //set the employee id for which we need to check the primary skill
		String server = "localhost";
		int port = 9090;


		// Allow passing in the user and target strings as command line arguments
		if (args.length > 0) {
			if (args[0] == null || "--help".equals(args[0])) {
				System.err.println("Usage: [employeeID] [server] [port]");
				System.err.println("");
				System.err.println("  employeeID    The employee ID for which you wish to identify Primary skill");
				System.err.println("  server  The server to connect to. Defaults to " + server);
				System.err.println("  port  The server port to connect to. Defaults to " + port);
				System.exit(1);
			}
			empID = Integer.parseInt(args[0]);
		}else {
			System.err.println("Invalid arguments. Atleast specify one argument i.e. employee ID. Usage: [employeeID] [server] [port]");
			System.exit(1);
		}

		if (args.length > 2) {
			server = args[1];
			port = Integer.parseInt(args[2]);
		}


		ManagedChannel channel = ManagedChannelBuilder.forAddress(server,port).usePlaintext().build();
		// stubs - generate from proto buf
		employeeBlockingStub empStub = employeeGrpc.newBlockingStub(channel);
		EmployeePrimarySkillRequest employeePrimarySkillRequest = EmployeePrimarySkillRequest.newBuilder().setEmpId(empID).build();

		try {

			APIResponse apiResponse = empStub.getEmployeePrimarySkill(employeePrimarySkillRequest);
			logger.info("Employee with id " + empID + " has primary skill as "  + apiResponse.getPrimarySkill());
		}finally {
			// ManagedChannels use resources like threads and TCP connections. To prevent leaking these
			// resources the channel should be shut down when it will no longer be used. If it may be used
			// again leave it running.
			channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);
		}

	}


}
